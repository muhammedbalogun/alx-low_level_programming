!<arch>
0-isupper.o/    1678503239  1000  1000  100764  231       `
#include "main.h"
#include <stdio.h>

/**
 * _isupper - check for uppercase character
 * @c: integer variable
 * Return: 1 if upper, 0 if lower
 */

int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	return (0);
}

0-memset.o/     1678502802  1000  1000  100764  296       `
#include "main.h"

/**
 * _memset - function that fills memory with a constant byte
 * @s: string variable
 * @b: string constant
 * @n: int variable
 *
 * Return: s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}
	return (s);
}
0-strcat.o/     1678502499  1000  1000  100764  394       `
#include "main.h"

/**
 * _strcat - function that concatenates two strings
 * @dest: first string variable to concat
 * @src: second string variable to concat
 *
 * Return: dest
 */

char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}

	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}

	dest[i] = '\0';
	return (dest);
}
1-isdigit.o/    1678503271  1000  1000  100764  218       `
#include "main.h"
#include <stdio.h>

/**
 * _isdigit - check for number
 * @c: integer variable
 * Return: 1 if upper, 0 if lower
 */

int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	return (0);
}
1-memcpy.o/     1678502832  1000  1000  100764  296       `
#include "main.h"

/**
 * _memcpy - function that copies memory area
 * @dest: memory area
 * @src: source
 * @n: length of source
 *
 * Return: dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.o/    1678502243  1000  1000  100764  398       `
#include "main.h"

/**
 * _strncat - function that concatenate two string
 * @dest: first string variable
 * @src: second string variable
 * @n: integer variable
 *
 * Return: dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	int dest_len = 0;

	while (dest[i++])
	{
		dest_len++;
	}

	i = 0;
	while (src[i] && i < n)
	{
		dest[dest_len++] = src[i];
		i++;
	}
	return (dest);
}
100-atoi.o/     1678504610  1000  1000  100764  419       `
#include "main.h"

/**
 * _atoi - convert a string into an integer
 * @s: string variable
 *
 * Return: integer
 */

int _atoi(char *s)
{
	int sign = 1, i = 0;
	unsigned int res = 0;

	while (!(s[i] <= '9' && s[i] >= '0') && s[i] != '\0')
	{
		if (s[i] == '-')
			sign *= -1;
		i++;
	}
	while (s[i] <= '9' && (s[i] >= '0' && s[i] != '\0'))
	{
		res = (res * 10) + (s[i] - '0');
		i++;
	}
	res *= sign;
	return (res);
}

2-strchr.o/     1678502942  1000  1000  100764  305       `
#include "main.h"

/**
 * _strchr - function that locates a character in a string
 * @s: string to search
 * @c: character to locate.
 *
 * Return: s or null
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
		{
			return (s + i);
		}
	}
	return ('\0');
}

2-strlen.o/     1678502635  1000  1000  100764  225       `
#include "main.h"

/**
 * _strlen - calculate the length of a string
 * @s: string variable
 *
 * Return: len
 */

int _strlen(char *s)
{
	int i;
	int len = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		len++;
	}
	return (len);
}

2-strncpy.o/    1678502341  1000  1000  100764  341       `
#include "main.h"

/**
 * _strncpy - function that copies string
 * @dest: sting variable
 * @src: string variable
 * @n: integer variable
 *
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
		dest[i] = src[i];

	for ( ; i < n; i++)
		dest[i] = '\0';

	return (dest);
}

3-islower.o/    1678503421  1000  1000  100764  248       `
#include "main.h"

/**
 * _islower - function that checks for lowercase character
 * @c: int variable
 *
 * Return: 0
 */

int _islower(int c)
{
	int i = 'a';

	for (i = 'a'; i <= 'z'; i++)
	{
		if (c == i)
		{
			return (1);
		}
	}
	return (0);
}
3-puts.o/       1678502694  1000  1000  100764  240       `
#include "main.h"

/**
 * _puts - print a string followed by a new line
 * @str: pointer to a string to print
 *
 * Return: 0
 */

void _puts(char *str)
{
	int i;

	i = 0;
	while (str[i])
	{
		_putchar(str[i]);
		i++;
	}
	_putchar('\n');
}
3-strcmp.o/     1678502419  1000  1000  100764  320       `
#include "main.h"

/**
 * _strcmp - function that compares two strings
 * @s1: first string variable
 * @s2: second string variable
 *
 * Return: res
 */

int _strcmp(char *s1, char *s2)
{
	int res = 0;

	while (*s1 == *s2 && *s1 != '\0')
	{
		s1++;
		s2++;
	}

	if (s1 != s2)
	{
		res = *s1 - *s2;
	}

	return (res);
}
3-strspn.o/     1678502983  1000  1000  100764  434       `
#include "main.h"

/**
 * _strspn - function that gets the length of a prefix substring
 * @s: string to search
 * @accept: prefix to measure.
 *
 * Return: n
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				n++;
				break;
			}

			else if (accept[i + 1] == '\0')
			{
				return (n);
			}
		}
		s++;
	}
	return (n);
}
4-isalpha.o/    1678503453  1000  1000  100764  280       `
#include "main.h"

/**
 * _isalpha - function that checks for alphabetic character
 * @c: int variable
 *
 * Return: 1 or 0
 */

int _isalpha(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}

	else if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}

	else
	{
		return (0);
	}
}
4-strpbrk.o/    1678503071  1000  1000  100764  366       `
#include "main.h"

/**
 * _strpbrk - function that searches a string for any of a set of bytes
 * @s: string to search
 * @accept: set of bytes to search for
 *
 * Return: s or null
 */
char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				return (s);
			}
		}
		s++;
	}
	return ('\0');
}
5-strstr.o/     1678503106  1000  1000  100764  496       `
#include "main.h"

/**
 * _strstr - function that locates a substring
 * @haystack: string to search
 * @needle: substring to locate
 *
 * Return: haystack or null
 */

char *_strstr(char *haystack, char *needle)
{
	int i;

	if (*needle == 0)
	{
		return (haystack);
	}

	while (*haystack)
	{
		i = 0;

		if (haystack[i] == needle[i])
		{
			for (; haystack[i] == needle[i]; i++)
			{
				if (needle[i + 1] == '\0')
				{
					return (haystack);
				}
			}
		}
		haystack++;
	}
	return ('\0');
}
6-abs.o/        1678503542  1000  1000  100764  195       `
#include "main.h"
/**
 * _abs - function that computes the absolute value of an int
 * @n: integer variable
 *
 * Return: n
 */

int _abs(int n)
{
	if (n < 0)
	{
		return (-n);
	}
	return (n);
}

9-strcpy.o/     1678504641  1000  1000  100764  290       `
#include "main.h"

/**
 * *_strcpy -  copies the string pointed to by src
 * @dest: string variable
 * @src: string variable
 * `
 * Return: Pointer to `dest
 */

char *_strcpy(char *dest, char *src)
{
	int i = -1;

	for (; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}

	return (dest);
}
_putchar.o/     1678503587  1000  1000  100764  247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

